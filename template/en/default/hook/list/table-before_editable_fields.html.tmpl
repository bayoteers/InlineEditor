[%#
  # The contents of this file are subject to the Mozilla Public
  # License Version 1.1 (the "License"); you may not use this file
  # except in compliance with the License. You may obtain a copy of
  # the License at http://www.mozilla.org/MPL/
  #
  # Software distributed under the License is distributed on an "AS
  # IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  # implied. See the License for the specific language governing
  # rights and limitations under the License.
  #
  # The Original Code is the Inline Editor Bugzilla Extension.
  #
  # The Initial Developer of the Original Code is "Nokia Corporation"
  # Portions created by the Initial Developer are Copyright (C) 2011 the
  # Initial Developer. All Rights Reserved.
  #
  # Contributor(s):
  #   Visa Korhonen <visa.korhonen@symbio.com>
  #%]
<link rel="stylesheet" href="extensions/InlineEditor/web/js/jquery/css/ui-lightness/jquery-ui-1.8.10.custom.css">
[% USE Bugzilla %]
[% USE date %]

<script type="text/javascript">
  /*****************************************************************************
   * Toggling of static and editable fields is based on tr-tags, that
   * enclose both fields. Static field is preceded by tr-tag (field_start-hook)-
   * Static field is followed by ending tr-tag and editable field inside
   * enclosing tr-element (field_end-hook).
   *
   * Both static and editable fields contain event handlers for changing the
   * state of field. Static field contains hanlder in tr-element for 
   * double-click. Handler is either makeeditable or make_daily_editable
   * depending of field. Editable field contains event-handler
   * checkIfEditedFieldChanged. Event handler is called depending of whether
   * change is cancelled or saved.
   ****************************************************************************/
</script>

[% SET inline_select_fields = {} %]

[% FOREACH field = Bugzilla.get_fields(
  { type => constants.FIELD_TYPE_SINGLE_SELECT, custom => 0 })
%]
  [% inline_select_fields.${field.name} = field %]
[% END %]

[% daily = 0 %]
[% daily = urlquerypart.search("&daily") ? 1 : 0 %]

[% inline_editable = Param('inlineeditor_bug_list_editable_fields') %]
[% has_access = 0 %]
[% access_groups = Param('inlineeditor_access_groups') %]
[% FOREACH inline_group IN access_groups %]
  [% IF (user.in_group(inline_group)) %]
    [% has_access = 1 %]
  [% END %]
[% END %]

[% severity_field = Bugzilla.get_fields({ name => 'bug_severity' }).first %]
[% priority_field = Bugzilla.get_fields({ name => 'priority' }).first %]

<script id="bug_severity_field_html" type="text/html">
[% PROCESS "bug/field.html.tmpl"
        bug = bug, field = severity_field,
        no_tds = 1, value = 0,
        editable = 1 %]
</script>

<script id="priority_field_html" type="text/html">
[% PROCESS "bug/field.html.tmpl"
        bug = bug, field = priority_field,
        no_tds = 1, value = 0,
        editable = 1 %]
</script>

<script type="text/javascript">

  var user_has_access_to_inline_editor = [% has_access %];
  $(document).ready(function() {
      if(user_has_access_to_inline_editor)
      {
          addHTML();
      }
  } );

  // Id of that field, which is currently in editable state
  var editedFieldid = "";
  
  // Value of field, which was assigned when field became to editable state
  var originalValue = "";
  
  // Value (index) of select-element, which was selected when field became to editable state
  var originalSelectedIndex = "";
  
  // User login is used for comparison, whether bug has been assigned to user himself
  var user_login = '[% user.login() %]';
  
  /**
   * Function finds element by it's id. First element of type 'input' is searched and returned.
   */
  
  function getInputElementByParentId(parentId) {
    var parentEl = document.getElementById(parentId);
    var inputsList = parentEl.getElementsByTagName("input");
    return inputsList[0];
  }
  
  /**
   * Function checks whether edited field has been changed from original value.
   * If value has changed, field is tried to be saved. Edited field is made hidden
   * static field is made visible. Static field is changed into same value, that is saved, 
   * or original value, if saving is not done.
   *
   * Editable fields of types 'input' and 'select' are handled separately.
   */
  
  function checkIfEditedFieldChanged(mustsave, mustask) {
    var editField = getInputElementByParentId(editedFieldid + "_editable");
    var newValue = "";
  
    var bugId = editedFieldid.match(/^\d{1,6}/);
    var fieldName = editedFieldid.substr(bugId[0].length + 1);
  
    if (editField) {
      // Input element was searched and if it was found, edited field is text-input-type
      newValue = editField.value;

      // If value is not saved (or it has not changed), original value is restored
      if (newValue != originalValue) {
        if (decidetosave(editedFieldid, fieldName, mustsave, mustask)) {
          save(editedFieldid, newValue);
          makeInputStatic(editedFieldid, newValue);
        } else {
          makeInputStatic(editedFieldid, originalValue);
        }
      } else {
        makeInputStatic(editedFieldid, originalValue);
      }
    } else {
      // Else edited field is selection-element. Selection-element be handled separately.
      editableEl = document.getElementById(editedFieldid + "_editable");
      var selectEl = editableEl.getElementsByTagName("select")[0];
      var selectedIndex = selectEl.selectedIndex;

      if (originalSelectedIndex != selectedIndex) {
        // If value is not saved (or it has not changed), original value is restored
        newValue = selectEl.options[selectedIndex].value;
        if (decidetosave(editedFieldid, fieldName, mustsave, mustask)) {
          save(editedFieldid, newValue);
  
          makeSelectStatic(editedFieldid, selectEl.value, fieldName);
        } else {
          makeSelectStatic(editedFieldid, originalValue, fieldName);
        }
      } else {
        makeSelectStatic(editedFieldid, originalValue, fieldName);
      }
    }
  
    editedFieldid = "";
    originalValue = "";
  }
  
  /**
   * Function solves whether changed value of field will be saved or not.
   */
  
  function decidetosave(fieldid, fieldName, mustsave, mustask) {
    var decission = false;
  
    // If mustsave is false, this function does nothing, but this is really for clarity of code.
    if (mustsave) {
      if (mustask) {
        if (confirm("Do you want to save changes in " + fieldName)) {
          decission = true;
        } else {
          decission = false;
        }
      } else {
        decission = true;
      }
    } else {
      decission = false;
    }
    return decission;
  }
  
  /**
   * Function saves value.
   */
  
  function save(fieldid, newValue, mustask) {
    var bugId = fieldid.match(/^\d{1,6}/);
    var fieldName = fieldid.substr(bugId[0].length + 1);
  
    saveBugField(bugId[0], fieldName, newValue);
  }
  
  /**
   * Function is call-back function, that is called after succesfull ajax call returns.
   * Ajax call if succesfull, if server responds without throwing exception. Ordered
   * errors are shown in error message. Function shows status of saving to user.
   */
  
  function saveResponse(response, status, xhr) {
    var retObj = eval("(" + response + ")");

    if (retObj.errors) {
      alert("There are errors: " + retObj.errormsg);
    } else {
      alert("Success");
    }
  }
  
  /**
   * Function saves value of one bug field into database by doing ajax-call.
   */
  
  function saveBugField(bugId, fieldName, newValue) {
    var json_params = '{ "method": "Bug.update", "params": {"ids" : [ {"' + bugId + '": { "' + fieldName + '": "' + newValue + '"} } ] }, "id" : 0 }';
  
    $.post('page.cgi?id=InlineEditor/ajax.html', {
      schema: 'bug',
      action: 'update',
      data: json_params
    }, saveResponse, 'text');
  }
  
  /* Synchronous call for debugging */
  
  function synchronous_saveBugField(bugId, fieldName, newValue) {
    var json_params = '{ "method": "Bug.update", "params": {"ids" : [ {"' + bugId + '": { "' + fieldName + '": "' + newValue + '"} } ] }, "id" : 0 }';
  
    $.ajax({
      async: false,
      url: 'page.cgi?id=scrums/ajax.html',
      data: {
        schema: 'bug',
        action: 'update',
        data: json_params
      },
      success: saveResponse
    });
  }
  
  /**
   * Function makes static field hidden and editable field visible.
   * Value of edited field is stored so that it can be used when changed value is later saved.
   * While changing the state of one field to editable, id of that field is stored.
   *
   * Static and editable elements are TR-elements. Static element contains static text.
   * Editable TR-element contains element, which is either text-input or select.
   *
   * Editable fields of types 'input' and 'select' are handled separately.
   */
  
  function makeeditable(fieldid) {
    var status = false;
  
    var staticId = fieldid + "_static";
    var editableId = fieldid + "_editable";
    var staticEl = document.getElementById(staticId);
    var editableEl = document.getElementById(editableId);
  
    if (editedFieldid != "" && editedFieldid != fieldid) {
      status = checkIfEditedFieldChanged(true /* must save */ , true /* must ask first */ );
    }

    editedFieldid = fieldid;
    // Visibility is changed by changing CSS-style of TR-elements.
    staticEl.style.visibility = 'collapse';
    editableEl.style.visibility = 'visible';
  
    var allInputs = editableEl.getElementsByTagName("input");

    if (allInputs.length > 0) {
      // Input element was searched and if it was found, edited field is text-input-type
      originalValue = allInputs[0].value;
    } else {
      // Else edited field is select-element. Select-element is handled separately.
      var spanEl = staticEl.getElementsByTagName("span")[0];
      // Title of element equals actual value in every field except assigned_to-field
      var textVal = spanEl.title;
      var selectEl = editableEl.getElementsByTagName("select")[0];
      var allOptions = selectEl.options;
      var selectedIndex = 0;
      var i = 0;
      for (i = 0; i < allOptions.length; i++) {
        if (allOptions[i].value == textVal) {
          selectedIndex = i;
          break;
        }
      }
      var selectedItem = selectEl.options[selectedIndex];
      originalSelectedIndex = selectedIndex;
      originalValue = selectedItem.value;
      selectEl.value = selectedItem.value;
    }
  }
  
  /**
   * Function makes static field hidden and editable field visible.
   * Value of edited field is stored so that it can be used when changed value is later saved.
   * While changing the state of one field to editable, id of that field is stored.
   *
   * Static and editable elements are TR-elements. Static element contains static text.
   * Editable TR-element contains select-element.
   *
   * This function corresponds to makeeditable-function. Difference is, that this method is used only
   * form 'assigned_to' field in 'daily' mode of operation.
   */
  
  function make_daily_editable(fieldid) {
    var status = false;
  
    var staticId = fieldid + "_static";
    var editableId = fieldid + "_editable";
    var staticEl = document.getElementById(staticId);
    var editableEl = document.getElementById(editableId);
  
    var spanEl = staticEl.getElementsByTagName("span")[0];
    // Value is always hidden before starting to edit assigned_to in daily
    var textVal = "--"; // Hidden value

    // Field is in 'daily' mode. There is no other possible users to choose from than user himself.
    if (textVal == user_login) return false; // Bug which is assigned to user himself can not be unassigned in daily

    if (editedFieldid != "" && editedFieldid != fieldid) {
      status = checkIfEditedFieldChanged(true /* must save */ , true /* must ask first */ );
    }

    editedFieldid = fieldid;
    staticEl.style.visibility = 'collapse';
    editableEl.style.visibility = 'visible';
  
    var selectEl = editableEl.getElementsByTagName("select")[0];
    var allOptions = selectEl.options;
  
    // If there is no option in select, which equals assigned value, 0-index is selected.
    // Index corresponds to value '--', which is unassigned new item.
    var selectedIndex = 0;
    var i = 0;

    for (i = 0; i < allOptions.length; i++) {
      if (allOptions[i].value == textVal) {
        selectedIndex = i;
        break;
      }
    }

    // Original value and corresponding index are stored so that they can be used, when field is saved.
    // (This is in fact unnecessary because assigning user as bug assignee makes field impossible to edit.)
    var selectedItem = selectEl.options[selectedIndex];
    originalSelectedIndex = selectedIndex;
    originalValue = textVal;
  }
  
  /**
   * Function makes static field visible and makes editable field hidden,
   * when editable field is type 'input'.
   *
   * Although editable field is made invisible, it is assigned value.
   * Assigning value of hidden field enables restoring original value,
   * when change is undone.
   */
  
  function makeInputStatic(fieldid, currentvalue) {
    var staticId = fieldid + "_static";
    var editableId = fieldid + "_editable";
    var staticEl = document.getElementById(staticId);
    var editableEl = document.getElementById(editableId);
  
    var td = staticEl.getElementsByTagName("td")[0];
    td.innerHTML = currentvalue;
  
    staticEl.style.visibility = 'visible';
    editableEl.style.visibility = 'collapse';
  
    var allInputs = editableEl.getElementsByTagName("input");
    allInputs[0].value = currentvalue;
  }
  
  /**
   * Function makes static field visible and makes editable field hidden,
   * when editable field is type 'select'.
   */
  
  function makeSelectStatic(fieldid, currentValue, fieldName) {
    var staticId = fieldid + "_static";
    var editableId = fieldid + "_editable";
    var staticEl = document.getElementById(staticId);
    var editableEl = document.getElementById(editableId);
  
    // Value is set to select-element once more. This has meaning, if original value is restored.
    var selectEl = editableEl.getElementsByTagName("select")[0];
    selectEl.value = currentValue;
  
    // Field 'assigned_to' is handled separately, because it is only field, 
    // that is not abbreviated in static text.
    if (fieldName == "assigned_to") {
      var newText = '<span title="' + currentValue + '">' + currentValue + '</span>';
  
      var td = staticEl.getElementsByTagName("td")[0];
      td.innerHTML = newText;
    } else {
      var abbr = currentValue.substr(0, 3);
      var newText = '<span title="' + currentValue + '">' + abbr + '</span>';
  
      var td = staticEl.getElementsByTagName("td")[0];
      td.innerHTML = newText;
    }
  
    staticEl.style.visibility = 'visible';
    editableEl.style.visibility = 'collapse';
  }

function addHTML() 
{
    var inline_editable = [[% FOREACH editable_field IN inline_editable %]"[% editable_field %]",[% END %]];
    var editable_fields = new Object;
    for(var ed_index = 0; ed_index < inline_editable.length; ed_index++)
    {
	editable_fields[inline_editable[ed_index]] = 1;
    }
    var daily = [% daily %];
    var user_login = "[% user.login() %]";
    var rows = $("tr.bz_bugitem");
    var numberofitems = rows.length;

    for(row_index = 0; row_index < numberofitems; row_index++)
    {
        current_row = rows[row_index];
        var cells = current_row.getElementsByTagName("td");
        var numberofcells = cells.length;

        var bug_id;
	var bug_status;
        for(i = 0; i < numberofcells; i++)
        {
            var cell = cells[i];
            var c_class = cell.className;
            if(c_class == "first-child bz_id_column")
            {
	        var a = cell.getElementsByTagName("a")[0];
                bug_id = a.innerHTML;
            }
            else if(c_class == "bz_bug_status_column")
            {
	        var statusSpan = cell.getElementsByTagName("span")[0];
	        bug_status = statusSpan.innerHTML;
	    }
        }

	// Cells need to be iterated backwards. 
	// Otherwise adding cells into row messes indexing of cells and same cell will be processed several times.
        for(i = numberofcells - 1; i >= 0; i--)
        {
            var cell = cells[i];
            var c_class = cell.className;

            if(c_class == "bz_scrums_blocked_column")
            {
		var old_content = cell.innerHTML;
                var html = '<a href="show_bug.cgi?id=' + old_content + '">' + old_content + '</a>';
		cell.innerHTML = html;
	    }
            else if(c_class == "bz_assigned_to_column" && editable_fields['assigned_to'])
            {
	        var assignedSpan = cell.getElementsByTagName("span")[0];
	        var initialValue = assignedSpan.innerHTML;
 	        var old_content = cell.innerHTML;
                var newContent = getAssignedToFieldHtml(bug_id, old_content, initialValue, daily, user_login, bug_status, cell);

	        cell.innerHTML = newContent;
            }
            else if(c_class == "bz_estimated_time_column" &&  editable_fields['estimated_time'])
            {
 	        var old_content = cell.innerHTML;
		var initialValue = cell.innerHTML;
                var newContent = getInputFieldHtml('estimated_time', bug_id, old_content, initialValue, '4' /* size */);

	        cell.innerHTML = newContent;
            }
            else if(c_class == "bz_remaining_time_column" && editable_fields['remaining_time'])
            {
 	        var old_content = cell.innerHTML;
		var initialValue = cell.innerHTML;
                var newContent = getInputFieldHtml('remaining_time', bug_id, old_content, initialValue, '4' /* size */);

	        cell.innerHTML = newContent;
            }
            else if(c_class == "bz_bug_severity_column"  && editable_fields['bug_severity'])
            {
		var old_content = cell.innerHTML;
		var html = getBugSeverityHtml(bug_id, old_content);
		cell.innerHTML = html;
	    }
            else if(c_class == "bz_priority_column"  && editable_fields['priority'])
            {
		var old_content = cell.innerHTML;
		var html = getPriorityHtml(bug_id, old_content);
		cell.innerHTML = html;
	    }
        }
    }
}

function getInputFieldHtml(field_name, bug_id, old_content, initialValue, size)
{
    var template = $("#InputFieldTmpl").html();

    template = template.replace(/<field_name>/g, field_name);
    template = template.replace(/<bug_id>/g, bug_id);
    template = template.replace('<old_content>', old_content);
    template = template.replace('<initialValue>', initialValue);
    template = template.replace('<size>', size);
    return template;
}  


function getAssignedToFieldHtml(bug_id, old_content, initialValue, daily, user_login, bug_status, cell)
{
    // Initial value might contain empty space or other insignificant characters
    var assigned_to_user = (initialValue.match(user_login) != null);
    
    if(!daily)
    {
    	return getInputFieldHtml('assigned_to', bug_id, old_content, initialValue, '25' /* size */);
    }
    else
    {
	if(assigned_to_user)
	{
	    return old_content;
	}
	else
	{
            var assignedSpan = cell.getElementsByTagName("span")[0];
	    assignedSpan.innerHTML = "--";
	    var select_element = "<select>" +
		                     "<option>--</option>" +
                    		     "<option>" + user_login + "</option>" +
                  		 "</select>";

    	    var template = $("#SelectFieldTmpl").html();
    	    template = template.replace(/<field_name>/g, 'assigned_to');
    	    template = template.replace(/<bug_id>/g, bug_id);
    	    template = template.replace('<select_field>', select_element);
    	    template = template.replace('<old_content>', cell.innerHTML /* Contains changed text */);
    	    return template;
	}
    }
}

function getBugSeverityHtml(bug_id, old_content)
{
    var bug_severity_field = $("#bug_severity_field_html").html();

    // HTML of bug severy contains also JavaScript, that has been commented out
    // This is a problem, because HTML contains script-tag. Parsing HTML from
    // HTML-template stops, when 'script' end tag is encountered. 
    // This makes parsed string to contain 'script' opening tag without ending tag.
    // This in turn makes all HTML disappear after 'script' tag, when string is 
    // concatenated into other text. Solution is to rip off 'script' tag from string.
    var split_index = bug_severity_field.indexOf('<script');
    bug_severity_field = bug_severity_field.substring(0, split_index);

    var template = $("#SelectFieldTmpl").html();
    template = template.replace(/<field_name>/g, 'bug_severity');
    template = template.replace(/<bug_id>/g, bug_id);
    template = template.replace('<select_field>', bug_severity_field);
    template = template.replace('<old_content>', old_content);
    template = template.replace('name="bug_severity"', '');
    return template;
}

function getPriorityHtml(bug_id, old_content)
{
    var priority_field = $("#priority_field_html").html();

    // HTML of bug severy contains also JavaScript, that has been commented out
    // This is a problem, because HTML contains script-tag. Parsing HTML from
    // HTML-template stops, when 'script' end tag is encountered. 
    // This makes parsed string to contain 'script' opening tag without ending tag.
    // This in turn makes all HTML disappear after 'script' tag, when string is 
    // concatenated into other text. Solution is to rip off 'script' tag from string.
    var split_index = priority_field.indexOf('<script');
    priority_field = priority_field.substring(0, split_index);

    var template = $("#SelectFieldTmpl").html();
    template = template.replace(/<field_name>/g, 'priority');
    template = template.replace(/<bug_id>/g, bug_id);
    template = template.replace('<select_field>', priority_field);
    template = template.replace('<old_content>', old_content);
    template = template.replace('name="priority"', '');
    return template;
}


</script>

<script id="SelectFieldTmpl" type="text/html">
    <table>
	<tr id="<bug_id>_<field_name>_static">
	    <td ondblclick="makeeditable('<bug_id>_<field_name>');">
	        <old_content>
	    </td>
	</tr>
	<tr id="<bug_id>_<field_name>_editable" style="visibility: collapse;">
	    <td>
	        <table>
	            <tr>
	        	<td>
        		    <select_field> 
	        	</td>
	                <td>
	        	    <span class="ui-icon ui-icon-arrowreturnthick-1-w" title="cancel"" onclick="checkIfEditedFieldChanged(false);"></span>
	                </td>
	                <td>
	        	    <span class="ui-icon ui-icon-check" title="save" onclick="checkIfEditedFieldChanged(true);"></span>
	                </td>
	            </tr>
	        </table>
	   </td>
      </tr>
    </table>
</script>

<script id="InputFieldTmpl" type="text/html">
    <table>
	<tr id="<bug_id>_<field_name>_static">
	    <td ondblclick="makeeditable('<bug_id>_<field_name>');">
	        <old_content>
	    </td>
	</tr>
	<tr id="<bug_id>_<field_name>_editable" style="visibility: collapse;">
	    <td>
	        <table>
	            <tr>
	        	<td>
        		    <input size="<size>" name="inline_<field_name>" value="<initialValue>" id="inline_<field_name>"> 
	        	</td>
	                <td>
	        	    <span class="ui-icon ui-icon-arrowreturnthick-1-w" title="cancel"" onclick="checkIfEditedFieldChanged(false);"></span>
	                </td>
	                <td>
	        	    <span class="ui-icon ui-icon-check" title="save" onclick="checkIfEditedFieldChanged(true);"></span>
	                </td>
	            </tr>
	        </table>
	   </td>
      </tr>
    </table>
</script>

